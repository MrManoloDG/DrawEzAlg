{
  "lang": "english",
  "start": "Start",
  "code": "Code",
  "end": "End",
  "return": "Return",
  "if": "If",
  "while": "While",
  "for": "For",
  "output": "Output",
  "input": "Input",
  "assign": "Assing",
  "subprogram": "Subprogram",
  "function": "Function",
  "procedure": "Procedure",
  "solution": "Solution",
  "solution-placeholder": "Solution",
  "param": "Parameters",
  "param-placeholder": "Enter parameters. Ej: x,y,...",
  "ioparam": "I/O Parameters",
  "desc": "Description",
  "name": "Name",
  "name-placeholder": "Enter name of function",
  "language": "Language",
  "function-desc": "As a general idea, it is presented as an subalgorithm that is part of the main algorithm, which allows to solve a specific task.",
  "if-desc": "The Selective structure If it allows the flow of the diagram to follow a path if the determined condition is fulfilled. If in evaluating the condition it is true to execute the road ' Yes ', on the contrary, if it is false to execute the ' No ' way. After This continues the normal execution of the program.",
  "while-desc": "The repetitive structure while allowing you to repeat a set of instructions. THE structure will repeat the loop until the condition is not fulfilled. Once This condition is not fulfilled the continuous program with its normal execution.",
  "for-desc": "This structure is used to repeat a set of instructions a defined number of times. This structure consists of a cycle control variable with an initialization of this one, a condition for it to run while it is being fulfilled and an increment or decrement of the control variable.",
  "output-desc": "Writing data, prints a result on The screen.",
  "input-desc": "Data reading, assigns a variable a value entered by keyboard at run time of the program. This is a destructive operation.",
  "assign-desc": "The assignment gives value or arithmetic expressions to the variables. This is a destructive operation, which means that if the variable had a value, it is destroyed by assigning the new value.",
  "condition": "Condition",
  "condition-placeholder": "Write a condition",
  "variable": "Variable",
  "var-cont": "Accountant",
  "init-val": "Initial value",
  "final-val": "Final value",
  "variable-desc": "Variables are objects that can change their value during the execution of a program. Identifiers are used to name variables.",
  "variable-placeholder": "Write a placeholder",
  "incremental": "Increment",
  "incremental-placeholder": "Write an increment",
  "increment": "Increment",
  "decrement": "Decrement",
  "initialization": "Initialization",
  "initialization-placeholder": "Write a initialization",
  "output-label": "Expression",
  "output-placeholder": "Write an output",
  "delete": "Borrar",
  "delete-msg": "Are you sure to delete?",
  "yes": "Yes",
  "no": "No",
  "zoom-in": "Zoom in",
  "zoom-out": "Zoom out",
  "console": "Console",
  "run": "Run",
  "run-step": "Debug one step",
  "run-step-inFunction": "Debug one step (This come into the function)",
  "new": "New",
  "open": "Open file",
  "save": "Save",
  "saved": "Saved",
  "cancel": "Cancel",
  "close": "Close",
  "code-file": "Convert to code",
  "empty-input": "Empty Fields",
  "empty-input-text": "There are some empty necessary fields",
  "duplicate-funname": "There is a function with the same name",
  "open-files": "Open Files",
  "info-table": {
    "operator-list": "List of operators",
    "arithmetic-list": "List of arithmetic operators",
    "relational-list": "List of relational operators",
    "logical-list": "List of logical operators",
    "math-list": "List of Math methods supports",
    "math-list-info": "More info about math methods",
    "arithmetic-op": {
      "sum": "Sum",
      "sub": "Subtraction",
      "multiplication": "Multiplication",
      "division": "Division",
      "module": "Module"
    },
    "relational-op": {
      "equal": "Equal to",
      "different": "Different from",
      "less": "Less than",
      "greater": "Greater than",
      "less-equal": "Less than or equal to",
      "greater-equal": "Greater than or equal to"
    },
    "logical-op": {
      "negation": "Negation",
      "conjunction": "Conjunction",
      "disjunction": "Disjunction"
    }
  },
  "config": {
      "info":"Info",
      "languages": "Languages",
      "about":  "About"
  },
  "languages": {
    "en": "English",
    "es": "Spanish"
  }
}
